/*
  Evaluasi Ekspresi postfix di C ++
  Masukan ekspresi Postfix harus dalam format yang diinginkan.
  Operan harus bilangan bulat dan harus ada ruang di antara dua operan.
  Hanya operator '+', '-', '*' dan '/' yang diharapkan.
*/
#include<iostream>
#include<stack>
#include<string>

using namespace std;

// Fungsi untuk mengevaluasi ekspresi Postfix dan output kembali
int EvaluatePostfix(string expression);

// Fungsi untuk melakukan operasi dan mengembalikan output.
int PerformOperation(char operation, int operand1, int operand2);

// Fungsi untuk memverifikasi apakah karakter adalah simbol operator atau bukan. 
bool IsOperator(char C);

// Fungsi untuk memverifikasi apakah karakter adalah digit numerik.
bool IsNumericDigit(char C);

int main() 
{
	string expression; 
	cout<<"Enter Postfix Expression \n";
	getline(cin,expression);
	int result = EvaluatePostfix(expression);
	cout<<"Output = "<<result<<"\n";
}

// Fungsi untuk mengevaluasi ekspresi Postfix dan output kembali
int EvaluatePostfix(string expression)
{
	// Mendeklarasikan Stack dari pustaka template Standar di C ++
	stack<int> S;

	for(int i = 0;i< expression.length();i++) {

		// Mengecek setiap karakter dari kiri.
       // Jika karakter adalah pemisah, maka akan di lanjutkan.
		if(expression[i] == ' ' || expression[i] == ',') continue; 


// Jika karakter merupakan operator, dipecah dari dua elemen dari tumpukan,saat dilakukan operasi dan kemudian dorong hasilnya kembali.
		else if(IsOperator(expression[i])) {
			// Pop dua operan. 
			int operand2 = S.top(); S.pop();
			int operand1 = S.top(); S.pop();
			// Lakukan operasi
			int result = PerformOperation(expression[i], operand1, operand2);
			// Dorong kembali hasil operasi pada tumpukan.
			S.push(result);
		}
		else if(IsNumericDigit(expression[i])){
			// Ekstrak operan numerik dari string
    		// Terus incrementing saya selama Anda mendapatkan digit angka.
			int operand = 0; 
			while(i<expression.length() && IsNumericDigit(expression[i])) {
				// Untuk angka dengan lebih dari satu digit, karena kami memindai dari kiri ke kanan.
				// Setiap kali, kita mendapatkan digit ke arah kanan, kita dapat mengalikan jumlah saat ini dalam operan sebesar 10
				// dan tambahkan digit baru.
				operand = (operand*10) + (expression[i] - '0'); 
				i++;
			}
			// Akhirnya, Anda akan keluar dari while dengan saya set ke karakter non-numerik atau akhir string
			// decrement i karena itu akan bertambah di bagian kenaikan loop sekali lagi.
			// Kami tidak ingin melewatkan karakter non-numerik dengan menambahkan saya dua kali.
			i--;

			// Dorong operan di tumpukan.
			S.push(operand);
		}
	}
	// Jika ekspresi dalam format yang benar, Stack akhirnya akan memiliki satu elemen. Ini akan menjadi output.
	return S.top();
}

// Fungsi untuk memverifikasi apakah karakter merupakan digit numerik atau bukan.
bool IsNumericDigit(char C) 
{
	if(C >= '0' && C <= '9') return true;
	return false;
}

// Fungsi untuk memverifikasi apakah karakter adalah simbol operator atau bukan.
bool IsOperator(char C)
{
	if(C == '+' || C == '-' || C == '*' || C == '/')
		return true;

	return false;
}

// Fungsi untuk melakukan operasi dan mengembalikan output.
int PerformOperation(char operation, int operand1, int operand2)
{
	if(operation == '+') return operand1 +operand2;
	else if(operation == '-') return operand1 - operand2;
	else if(operation == '*') return operand1 * operand2;
	else if(operation == '/') return operand1 / operand2;

	else cout<<"Kesalahan tak terduga \n";
	return -1; 
}
